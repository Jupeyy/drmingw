branches:
  except:
  - /^appveyor.*$/

sudo: required
dist: bionic

# https://docs.travis-ci.com/user/gui-and-headless-browsers/#using-xvfb-to-run-tests-that-require-a-gui
services:
- xvfb

language: cpp

env:
  global:
  - CMAKE_BUILD_TYPE=Release
  - MAKEFLAGS=-j1
  - CTEST_OUTPUT_ON_FAILURE=1

matrix:
  fast_finish: true
  include:
  - compiler: ": Win32"
    env:
    - APT_PACKAGES="python3 p7zip g++-mingw-w64-i686 wine32-development:i386 wine-development"
    - MINGW_PREFIX=i686-w64-mingw32
    - WINE_PROGRAM=/usr/bin/wine-development
  - compiler: ": Win64"
    env:
    - APT_PACKAGES="python3 p7zip g++-mingw-w64-x86-64 wine64-development wine-development"
    - MINGW_PREFIX=x86_64-w64-mingw32
    - WINE_PROGRAM=/usr/bin/wine64-development

before_install:
- sudo dpkg --add-architecture i386
- sudo apt-get update -qq || true
- sudo apt-get install -qq -y --no-install-recommends $APT_PACKAGES
- cmake --version

script:
- |
    echo "set (CMAKE_SYSTEM_NAME Windows)" > Toolchain.cmake
    echo "set (CMAKE_C_COMPILER $MINGW_PREFIX-gcc)" >> Toolchain.cmake
    echo "set (CMAKE_CXX_COMPILER $MINGW_PREFIX-g++)" >> Toolchain.cmake
    echo "set (CMAKE_RC_COMPILER $MINGW_PREFIX-windres)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH /usr/$MINGW_PREFIX)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> Toolchain.cmake
- cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=Toolchain.cmake -DWINE_PROGRAM=$WINE_PROGRAM -DPython3_EXECUTABLE=/usr/bin/python3
- make -C build all
- $WINE_PROGRAM wineboot
- make -C build test
- make -C build package
