branches:
  except:
  - /^appveyor.*$/

sudo: required
dist: trusty

language: cpp

env:
  global:
  - CMAKE_BUILD_TYPE=Release
  - MAKEFLAGS=-j1
  - CTEST_OUTPUT_ON_FAILURE=1

matrix:
  fast_finish: true
  include:
  - compiler: ": Win32"
    env:
    - APT_REPOS="ppa:tobydox/mingw-x-trusty"
    - APT_PACKAGES="python3 p7zip mingw32-x-gcc wine1.6-i386:i386"
    - MINGW_ROOT=/opt/mingw32
    - MINGW_PREFIX=i686-w64-mingw32
    - WINE_PROGRAM=/usr/bin/wine
  - compiler: ": Win64"
    env:
    - APT_REPOS="ppa:tobydox/mingw-x-trusty"
    - APT_PACKAGES="python3 p7zip mingw64-x-gcc wine1.6-amd64"
    - MINGW_ROOT=/opt/mingw64
    - MINGW_PREFIX=x86_64-w64-mingw32
    - WINE_PROGRAM=/usr/bin/wine64

before_install:
- sudo dpkg --add-architecture i386
- for APT_REPO in $APT_REPOS; do sudo add-apt-repository -y $APT_REPO; done
- sudo apt-get update -qq || true
- sudo apt-get install -qq -y --no-install-recommends $APT_PACKAGES
- if [ "$MINGW_ROOT" ]; then export PATH=$MINGW_ROOT/bin:$PATH; fi
- cmake --version

script:
- |
    echo "set (CMAKE_SYSTEM_NAME Windows)" > Toolchain.cmake
    echo "set (CMAKE_C_COMPILER $MINGW_PREFIX-gcc)" >> Toolchain.cmake
    echo "set (CMAKE_CXX_COMPILER $MINGW_PREFIX-g++)" >> Toolchain.cmake
    echo "set (CMAKE_RC_COMPILER $MINGW_PREFIX-windres)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH $MINGW_ROOT)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)" >> Toolchain.cmake
    echo "set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)" >> Toolchain.cmake
- cmake -H. -Bbuild -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=Toolchain.cmake -DWINE_PROGRAM=$WINE_PROGRAM -DPYTHON_EXECUTABLE=/usr/bin/python3
- make -C build all
- $WINE_PROGRAM wineboot
- xvfb-run -a -s '-screen 0 1024x768x24' make -C build test
- make -C build package
